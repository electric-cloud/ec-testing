#!/usr/bin/env ec-perl
# -*-Perl-*-

# ntest -
#
# This file contains the basic infrastructure for ElectricCommander tests.
# It is invoked from the command line to run tests (see "Command-Line
# Options" below) and also defines various routines used by tests, such
# as the "ntest" subroutine that defines a test, various "assert" subroutines
# for error checking in tests, and other utilities such as those for
# making HTTP requests.
#
# Copyright (c) 2005-2014 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use Cwd;
use File::Basename;
use Time::Duration;
use Getopt::Long;
use lib dirname($0);
use Assert;

$::gFoundECModule = eval {require ElectricCommander};

# Turn off output buffering:

$| = 1;

# Set PERL5LIB if not already set so that perl sub-processes get the same
# include path as this invocation.

if (!exists($::ENV{PERL5LIB})) {
    $::ENV{PERL5LIB} = join(isWindows() ? ";" : ":",
                            @INC);
}

# ------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------

$::gCommander = '';                  # Will be initialized as a reference to
                                     # to the ElectricCommander.pm object.

# The following variables hold information from command-line arguments:

$::gDebugLevel = '';                 # One or more characters specifying
                                     # optional kinds of information to log.

$::gDocRoot = '';                    # Directory containing the PHP files for
                                     # the Web server being tested.

$::gHelp = 0;                        # 1 means --help was specified.

$::gMatch = '';                      # If nonempty, contains a regexp
                                     # pattern; only tests whose names
                                     # match this are executed.

$::gStart = '';                      # If nonempty, contains a regexp
                                     # pattern; no tests will run until
                                     # a test name matches this pattern.

$::gUntil = '';                      # If nonempty, contains a regexp pattern;
                                     # no tests will run after a test name
                                     # matches this pattern.

$::gUntilFailure = 0;                # True means repeat each test until it
                                     # fails. Most useful to run a single test
                                     # until it fails.

$::gQuiet = 0;                       # True means don't print anything about
                                     # tests that pass: only print for errors.

$::gTarget = "localhost:443";        # Location of the target being tested:
                                     # used as default server for httpGet
                                     # and httpPost.

$::gTestOut = '';                    # Directory in which tests can create
                                     # temporary files.  Some tests will use
                                     # test-specific subdirectories of this
                                     # directory.

$::gTimeDetails = 0;                 # True means print an extra line after
                                     # each test giving the time of day (used
                                     # for test timing analysis).

%::gTestTimes = ();                  # Hash containing test times, for output
                                     # at the end of the test run.

$::gUrlRoot = "commander";           # Value of --urlroot command-line
                                     # argument.

$::gWinAgents = '';                  # comma-separated list of agents
$::gSolAgents = '';                  # for each platform for systemtests
$::gLinAgents = '';
$::gHpuxAgents = '';
$::gMacintelAgents = '';
$::gMacppcAgents = '';
$::gSol86Agents = '';

$::gWorkspace = '';                  # ElectricCommander workspace root
$::gDbName = '';                     # Name of db.

$::gECTool = "$^X \"$FindBin::Bin/../ectool/ectool.pl\"";
                                     # Location of the 'ectool' utility.

$::gSslPort = 443;                   # The SSL port used if the server is
                                     # configured to use https.

# The following variables keep track of what has happened while running
# tests:

$::gTestFile = '';                   # The name of the current test file
$::gTestName = '';                   # The name of the current test
$::gErrorMessages = '';              # During the running of a test, messages
                                     # about test failures collect here.
                                     # Empty means the test has succeeded
                                     # so far.
$::gTotalTests = 0;                  # Total number of tests executed.
$::gSkippedTests = 0;                # Total number of tests that were
                                     # skipped because of constraints.
$::gFailedTests = 0;                 # Number of tests that failed.
@::gFailedTestCollector = ();        # Array containing the names of all
                                     # failed tests.
$::gStackTrace = '';                 # Stack trace from unhandled error
                                     # encountered during test evaluation.

# State variables for managing HTTP-based interactions with the Web server
# and ElectricCommander server:

$::gUserAgent = LWP::UserAgent->new(); # Used for HTTP transactions.
$::gConnCache = LWP::ConnCache->new();
$::gUserAgent->conn_cache($::gConnCache);

if (defined($ENV{"COMMANDER_TIMEOUT"})) {
    $::gUserAgent->timeout($ENV{"COMMANDER_TIMEOUT"});
} else {
    $::gUserAgent->timeout(180);
}

# Miscellaneous global variables:

$::gWorkingDirectory = cwd();        # Original working directory for the
                                     # program; used to restore cwd after
                                     # each test.
$::gCreatePrivateDirs = 1;           # True means we should create a private
                                     # subdirectory of $::gTestOut for each
                                     # test to use for working files.  False
                                     # means run all tests in $::gTestOut
                                     # (presumably the tests don't need
                                     # working space).
$::gPartialLineOutput = 0;           # True means that ntest has output the
                                     # first part of the banner line for the
                                     # current test before invoking it.  It's
                                     # nice to see the test that is currently
                                     # running, but if any other output
                                     # occurs during the test will want to
                                     # end this line so the output looks nice.
$::gToolsDir = '';                   # Location of /usr/local/tools directory
                                     # (must be non-Cygwin path on Windows).
$::gTempDir = '';                    # Directory in which to create temporary
                                     # files (platform-specific).
$::gLogTestNames = 0;                # If non-zero, ntest logs test names to
                                     # the ElectricCommander server.
$::gLogServerStats = 0;              # If non-zero, ntest logs statistics
                                     # between each test to the
                                     # ElectricCommander server log.
$::gTestFileDir = '';                # The directory of the currently
                                     # executing test file.

$::gTest = '';                       # The name of the current test.

# Debug logging
$::gDebug = 0;
$::gDebug = $::ENV{COMMANDER_DEBUG} if (defined $::ENV{COMMANDER_DEBUG});
$::gDebugFile = $::ENV{COMMANDER_DEBUGFILE};


# ------------------------------------------------------------------------
# Command-Line Options
# ------------------------------------------------------------------------

# Input for GetOptions:

my %gOptions = (
    "dbname=s"                              => \$::gDbName,
    "debug=s"                               => \$::gDebugLevel,
    "ectool=s"                              => \$::gECTool,
    "help"                                  => \$::gHelp,
    "match=s"                               => \$::gMatch,
    "sslPort=s"                             => \$::gSslPort,
    "start=s"                               => \$::gStart,
    "quiet"                                 => \$::gQuiet,
    "target=s"                              => \$::gTarget,
    "testout=s"                             => \$::gTestOut,
    "until=s"                               => \$::gUntil,
    "untilFailure"                          => \$::gUntilFailure,
    "urlroot=s"                             => \$::gUrlRoot,
    "timeDetails"                           => \$::gTimeDetails,
    "winagents=s"                           => \$::gWinAgents,
    "linagents=s"                           => \$::gLinAgents,
    "solagents=s"                           => \$::gSolAgents,
    "sol86agents=s"                         => \$::gSol86Agents,
    "hpuxagents=s"                          => \$::gHpuxAgents,
    "macintelagents=s"                      => \$::gMacintelAgents,
    "macppcagents=s"                        => \$::gMacppcAgents,
    "workspace=s"                           => \$::gWorkspace,
    );

# Help text to print in response to "-help":

$::gHelpMessage = "Usage: ntest [options] file/dir file/dir ...

Options:
--dbname=name                  Name of the ElectricCommander database
--debug=level                  One or more letters specifying optional
                               information to log to standard output:
                               d: debug (events related to test infrastructure)
                               t: test debug (test-specific events)
--ectool=cmdline               Full command line to invoke 'ectool'.
--help                         Print this message and exit without running
                               any tests
--match=pattern                Only run tests whose names match this regexp
                               pattern
--start=pattern                Don't run any tests until a test whose name
                               matches this pattern.
--quiet                        Don't print info about tests that pass
--target=hostname:port         Location of the component being tested.
                               Defaults to localhost:443.
--testout=path                 Directory in which test-specific files can
                               be created
--timeDetails                  If specified (and --quiet isn't specified),
                               print the time of day after each test
--until=pattern                Stop running tests once this pattern is seen
--untilFailure                 Repeat each test (usually one) until it fails.
--[win|lin|sol]agents=host     Hostnames of agents to use for each platform.
--workspace=path               Path to the ElectricCommander workspace
";

# ------------------------------------------------------------------------
# ntest
#
#      Run a single test.
#
# Results:
#      Always returns 1 (as a convenience to keep the outermost "do"
#      that reads a test file from seeming to fail).
#
# Arguments:
#      name       - (string) name of the test
#      attrs      - (ref hash) properties for this test
#      body       - (ref code) closure to execute: contains actual test
#                   code
# ------------------------------------------------------------------------

sub ntest($$$) {
    my ($name, $attrs, $body) = @_;

TESTRUN:

    my $start_time = time();

    $::gErrorMessages = '';
    $::gTotalTests++;
    $::gTestName = $name;

    # Make sure the banner contains at least 4 dots in a row (this is
    # used by output processors).

    my $banner = $name . " " . ('.' x (61 - length($name))) . "....";
    $::gPartialLineOutput = 0;
    if (!$::gQuiet) {
        # Start printing the banner for this test.  If we are not in quiet
        # we won't print the banner unless there is a test error.

        mesg('TEST', $banner);
        $::gPartialLineOutput = 1;
    }

    # Check 'start' pattern to skip tests until we see the start pattern

    if ($::gStart) {
        if ($name =~ /$::gStart/) {
            # We've seen the starting pattern, so allow tests to run from this
            # point on
            $::gStart = '';
        } else {
            $::gPartialLineOutput = 0;
            if (!$::gQuiet) {
                mesg('TEST', "SKIPPED\n");
            }
            $::gSkippedTests++;
            return 1;
        }
    }

    # Check 'until' pattern to skip tests after we see this pattern

    if ($::gUntil && ($::gUntil eq 'UNTIL' || $name =~ /$::gUntil/)) {
        $::gPartialLineOutput = 0;
        if (!$::gQuiet) {
            mesg('TEST', "SKIPPED\n");
        }
        $::gSkippedTests++;
        # Set this so we skip everything from hereon
        $::gUntil = 'UNTIL';
        return 1;
    }

    # Log a message on the server
    if ($::gCommander) {
        $::gCommander->logMessage("$::gTestFile:$banner",
                                  {level  => "info",
                                   logger => "ntest"}) if $::gLogTestNames;
    }

    $::gTestOut = Cwd::abs_path($::gTestOut);

    # Create a working directory for the test, if requested, cd to it,
    # and run the command.

    if ($::gCreatePrivateDirs) {
        # Substitute illegal path characters with "_".
        my $cleanName = $name;
        $cleanName =~ s/[:;]/_/g;
        $::gCurrentTestDir = "$::gTestOut/$cleanName";

        # If we are creating a private working directory for each test,
        # then clear its previous contents.  If all tests use the same
        # top-level directory, then don't do the delete.

        File::Path::rmtree($::gCurrentTestDir);
    } else {
        $::gCurrentTestDir = "$::gTestOut";
    }

    if (!-d $::gCurrentTestDir) {
        mesg('DBG', "making directory: $::gCurrentTestDir\n");
        mkdir $::gCurrentTestDir or die "ntest error: Couldn't create test "
            . "working directory \"$::gCurrentTestDir\": $!";
    }

    chdir $::gCurrentTestDir or die "ntest error: couldn't change to test "
            . "working directory \"$::gCurrentTestDir\": $!";

    eval {
        my $oldDeath = $SIG{__DIE__};
        $SIG{__DIE__} = \&captureStackTrace;
        our $gTest = $name;
        &$body();

        $SIG{__DIE__} = $oldDeath;
    };
    if ($@) {
        # An exception occurred during the test: log an error.

        $::gErrorMessages .= "unexpected exception occurred during "
            . "test:\n$@\n" . $::gStackTrace;

        # Clear out the stack trace

        $::gStackTrace = '';
    }

    # Dump statistics on the server, and reset them for the next test.
    if ($::gCommander) {
        $::gCommander->dumpStatistics({
            dumpLapTimes    => 1,
            clearStatistics => 1}) if $::gLogServerStats;
    }
    chdir($::gWorkingDirectory) or die "ntest error: couldn't restore "
            . "working directory to \"$::gWorkingDirectory\": $!";

    if ($::gPartialLineOutput) {
        $banner = '';
    }
    $::gPartialLineOutput = 0;
    if ($::gErrorMessages) {
        # This test had errors; log them.  Indent the error messages
        # so that it's easy for postprocessors to separate error messages
        # from surrounding text.

        $::gFailedTests++;
        my $indentedMessage = "\n$::gErrorMessages";
        $indentedMessage =~ s|\n|\n    |g;
        mesg('TEST', "%s", $banner . " FAILED$indentedMessage\n");
        push(@::gFailedTestCollector, $name . "\n  ");
    } else {
        if (!$::gQuiet) {
            mesg('TEST', "%s", $banner . " PASSED\n");
        }

        if ($::gUntilFailure) {
            goto TESTRUN;
        }
    }

    # Collect the duration for this test.

    my $duration = time() - $start_time;
    $::gTestTimes{$name} = $duration;

    if ($::gTimeDetails && !$::gQuiet) {
        # Print timing information to help find slow tests.

        mesg('TEST', "%s\n", (scalar localtime()));
    }
    return 1;
}

# ------------------------------------------------------------------------
# captureStacktrace
#
#       __DIE__ handler used during ntest eval() to produce a stacktrace
#
# ------------------------------------------------------------------------

sub captureStackTrace($) {
    my ($error) = @_;

    $::gStackTrace = "Caught" . Carp::longmess();
}

# ------------------------------------------------------------------------
# readFile
#
#      Return the contents of a given file, or an empty string if the file
#      can't be read or doesn't exist.
#
# Arguments:
#      fileName       - (string) name of the file
#      allowNonExistentFile - (bool) whether or not to treat a non-existent
#                     file as empty. 0 means block until it exists;
#                     1 means treat it as empty.  Defaults to 0.
#      encoding       - (string) Optional. Encoding to use.
#      timeout        - time (in seconds) after which we give up. Defaults
#                       to 30.
# ------------------------------------------------------------------------

sub readFile($;$$$) {
    my ($fileName, $allowNonExistentFile, $encoding, $timeout) = @_;
    my $result = '';
    my $buffer;
    my $f;

    # Try reading the file over and over until we succeed or exceed the
    # timeout.
    $timeout = 30 unless defined($timeout);
    my $expireTime = time() + $timeout;
    my $success = 0;
    while (time() < $expireTime) {
        if (open($f, "< $fileName")) {
            if ($encoding) {
                binmode($f => ':encoding(' . $encoding . ')');
            }
            local $/;
            $result = <$f>;
            close($f);

            if ($result =~ m/\0\0/) {
                sleep 2;
            } else {
                $success = 1;
                last;
            }
        } else {
            # The file doesn't exist or isn't readable.  Sleep for 2 seconds
            # and then try again, unless we've been told that file non-
            # existence is ok.

            if ($allowNonExistentFile) {
                $success = 1;
                last;
            } else {
                sleep 2;
            }
        }
    }

    # If the file was invalid, error out.  Otherwise, return the file contents.
    if (!$success) {
        mesg("ERR", "ntest error: readFile didn't find a valid file $fileName "
                . "after $timeout seconds\n");
    } else {
        return $result;
    }
}

# ------------------------------------------------------------------------
# writeFile
#
#      Write a string value to a given file.
#
# Arguments:
#      fileName       - (string) Name of the file
#      data           - (string) New contents for the file
#      encoding       - (string) Optional. File encoding to use.
# ------------------------------------------------------------------------

sub writeFile($$;$) {
    my ($fileName, $data, $encoding) = @_;
    my $f;
    if (open($f, "> $fileName")) {
        if($encoding) {
           binmode($f => ':encoding(' . $encoding . ')');
        } else {
           binmode $f;
        }
        printf($f "%s", $data);
        if (close($f)) {
            return;
        }
    }

    # Couldn't write the file; record a test error.

    $::gErrorMessages .= errorMessageHeader("writeFile couldn't create"
            . "\"$fileName\"");
    $::gErrorMessages .= "----- System error message:\n"
            . $! . "\n";
}

# ------------------------------------------------------------------------
# lines
#
#      Given a bunch of strings, this subroutine joins them together
#      with newline separators.
#
# Results:
#      The return value is the new string.
#
# Arguments:
#      string ...       - (string) Any number of strings to be joined
# ------------------------------------------------------------------------

sub lines(@) {
    join("\n", @_);
}

# ------------------------------------------------------------------------
# outdent
#
#      This subroutine is used when text such as XML documents is
#      included in indented code such as tests.  We want to indent the
#      XML in the test code, to maximize readability, but want the
#      indentation removed when the XML is actually use.  This subroutine
#      serves that purpose.
#
# Results:
#      The return value is a new string consisting of argument, outdented
#      as indicated by the "|" on the first line.
#
# Arguments:
#      string           - (string) String to outdent.  The first line must
#                         start with zero or more space characters,
#                         followed by a "|".  The "|" character
#                         indicates how much space should be
#                         removed from the beginning of every
#                         line in the strings: the character just
#                         after the "|" will appear at the left
#                         edge of the line.
# ------------------------------------------------------------------------

sub outdent($) {
    my ($string) = @_;

    # Find the indicator, and also replace it with a space, so it can be
    # further replaced in the next substitution.  Also remove initial
    # newlines.

    if ($string !~ s/\A\n*( *)\|/$1 /) {
        # No indicator: just return the original string.

        return $string;
    }
    my $prefix = "$1 ";

    # The following substitution does the actual outdenting by deleting
    # initial space on each line.

    $string =~ s/^$prefix//gm;
    return $string;
}

# ------------------------------------------------------------------------
# getTableElement
#
#      This subroutine picks out an element of the table, given its
#      row and column names.
#
# Results:
#      The return value is the XML::XPath::Node for the selected element,
#      or undef if there is no such element.
#
# Arguments:
#      xpath                     - (XML::XPath) Document containing the
#                                  table.
#      tablePath                 - (string) XPath string identifying the
#                                  <table> element for the table.  If there
#                                  are multiple such elements, each is
#                                  searched and first matching element
#                                  is returned.
#      rowPattern                - (string) The desired row is the first
#                                  one containing text in its first element
#                                  that matches this pattern.
#      columnPattern             - (string) The desired column is the first
#                                  one (at or above the desired row)
#                                  with an element containing text that
#                                  matches this pattern.
#      rowIndex                  - (integer, optional) If there are several
#                                  rows starting with the same rowPattern,
#                                  this index selects which one to use.
#                                  The default value is 0.
# ------------------------------------------------------------------------

sub getTableElement {
    my ($xpath, $tablePath, $rowPattern, $columnPattern, $rowIndex) = @_;
    if (!$rowIndex) {
        $rowIndex = 0;
    }

    my $tables = $xpath->findnodes($tablePath);
    if (!$tables->isa("XML::XPath::NodeSet")) {
        return undef;
    }

    # Iterator over all of the tables and all of the rows of each table.

    foreach my $table ($tables->get_nodelist) {
        my $column = -1;
        foreach my $row ($xpath->findnodes(".//tr", $table)->get_nodelist) {
            my $elements = $xpath->findnodes("td", $row);
            my $length = $elements->size();

            # If we have already figured out which column to use, see if
            # this row matches; if it does, return the appropriate element.

            if ($column >= 0) {
                if ($elements->string_value =~ $rowPattern) {
                    if ($rowIndex == 0) {
                        return $elements->get_node($column + 1);
                    } else {
                        $rowIndex --;
                    }
                }
            } else {
                # We haven't already selected a column; see if this row
                # identifies the desired column.

                my $i = 0;
                foreach my $element ($elements->get_nodelist) {
                    if ($element->string_value =~ $columnPattern) {
                        $column = $i;
                        last;
                    }
                    $i++;
                }
            }
        }
    }
    return undef;
}

# ------------------------------------------------------------------------
# tableElementHtml
#
#      Find an element in a table, and return the HTML for that element.
#
# Results:
#      The return value is the HTML comprising the selected element,
#      or an empty string if there is no such element.
#
# Arguments:
#      Same as for getTableElement.
# ------------------------------------------------------------------------

sub tableElementHtml($$$$;$) {
    my $element = getTableElement @_;
    if (!$element) {
        return '';
    }
    return $element->toString;
}

# ------------------------------------------------------------------------
# tableElementText
#
#      Find an element in a table, and return its text.
#
# Results:
#      The return value is the text contained in the selected element,
#      or an empty string if there is no such element.
#
# Arguments:
#      Same as for getTableElement.
# ------------------------------------------------------------------------

sub tableElementText($$$$;$) {
    my $element = getTableElement @_ ;
    if (!$element) {
        return '';
    }
    return $element->string_value;
}

# ------------------------------------------------------------------------
# tableElementHrefs
#
#      Return all of the URLs found in links in a table element.
#
# Results:
#      If the specified element contains one or more <a href=...>
#      elements, return a list of URLs from those elements.  If there
#      are no hrefs in the element, return an empty list.
#
# Arguments:
#      Same as for getTableElement.
# ------------------------------------------------------------------------

sub tableElementHrefs($@) {
    my $xpath = $_[0];
    my $element = getTableElement @_ ;
    my @result = ();
    if (!$element) {
        return @result;
    }
    foreach my $href ($xpath->findnodes(".//a", $element)->get_nodelist) {
        my $url = $href->getAttribute("href");
        if ($url eq "") {
            # An "onclick" handler may be used instead of an "href".

            $url = $href->getAttribute("onclick");
            if ($url eq "") {
                next;
            } else {
                my $index = index($url, "window.location.href = ");
                if ($index >= 0) {
                    $url = substr($url, $index + 24, -2);
                }
            }
        }
        push(@result, $url);
    }
    return @result;
}

# ------------------------------------------------------------------------
# getHrefs
#
#      Return all of the URLs found in links in a specified set of elements.
#
# Results:
#      If any of the specified elements contain <a href=...>
#      elements, return a list of URLs from those elements.  If no
#      matching hrefs are found, return an empty list.
#
# Arguments:
#      xpath                     - (XML::XPath) Document containing the
#                                  table.
#      path                      - (string) XPath string identifying elements
#                                  in which to search for links.
#                                  element(s) for the table.  If there
#                                  are multiple such elements, each is
#                                  searched and first matching element
#                                  is returned.
# ------------------------------------------------------------------------

sub getHrefs($$) {
    my ($xpath, $path) = @_;
    my @result = ();
    foreach my $context ($xpath->findnodes($path)->get_nodelist) {
        foreach my $href ($xpath->findnodes(".//a", $context)->get_nodelist) {
            my $url = $href->getAttribute("href");
            if ($url eq "") {
                # An "onclick" handler may be used instead of an "href".

                $url = $href->getAttribute("onclick");
                if ($url eq "") {
                    next;
                } else {
                    my $index = index($url, "window.location.href = ");
                    if ($index >= 0) {
                        $url = substr($url, $index + 24, -2);
                    }
                }
            }
            push(@result, $url);
        }
    }
    return @result;
}

# ------------------------------------------------------------------------
# numTableRows
#
#      This subroutine turns a count of the number of rows in a table.
#
# Results:
#      The return value is the number of rows in the table given by
#      $xpath.  If the table doesn't exist, or contains no rows, then
#      0 is returned.
#
# Arguments:
#      xpath                     - (XML::XPath) Document containing the
#                                  table.
#      tablePath                 - (string) XPath string identifying the
#                                  <table> element for the table.  If there
#                                  are multiple such elements, the first
#                                  is used.
# ------------------------------------------------------------------------

sub numTableRows($$) {
    my ($xpath, $tablePath) = @_;

    my $tables = $xpath->findnodes($tablePath);
    if (!$tables->isa("XML::XPath::NodeSet") || ($tables->size() == 0)) {
        return 0;
    }

    # Iterator over all of the rows of the table.

    my $table = $tables->get_node(1);
    return $xpath->findnodes(".//tr", $table)->size();
}

# ------------------------------------------------------------------------
# getAttributes
#
#      Extract a given attribute from a set of elements.
#
# Results:
#      The return value is a list containing the values of any
#      attributes matching $attribute found in elements identified
#      by $path.
#
# Arguments:
#      xpath                     - (XML::XPath) Document containing the
#                                  table.
#      path                      - (string) XPath string identifying elements
#                                  in which to search for the attribute.
#      attribute                 - (string) Name of the desired attribute.
# ------------------------------------------------------------------------

sub getAttributes($$$) {
    my ($xpath, $path, $attribute) = @_;
    my @result = ();
    foreach my $element ($xpath->findnodes($path)->get_nodelist) {
        my $att = $element->getAttribute($attribute);
        if ($att) {
            push(@result, $att);
        }
    }
    return @result;
}

# ------------------------------------------------------------------------
# getSubtrees
#
#      Given an XPath, return XML for all of the matching nodes.
#
# Results:
#      The return value is a string containing the XML text of each
#      node that matches $path, with separators between matching nodes.
#
# Arguments:
#      xpath                     - (XML::XPath) Document containing the
#                                  table.
#      path                      - (string) XPath string identifying elements
#                                  in which to search for the attribute.
# ------------------------------------------------------------------------

sub getSubtrees($$) {
    my ($xpath, $path) = @_;
    my $result = '';
    my $separator = '';
    foreach my $element ($xpath->findnodes($path)->get_nodelist) {
        $result .= $separator . $element->toString();
        $separator = "\n-------------------------\n";
    }
    return $result;
}

# ------------------------------------------------------------------------
# stripSpace
#
#      Remove whitespace from the beginning and end of a string, and
#      return the result.
#
# Arguments:
#      s                         - (string) String to strip.
# ------------------------------------------------------------------------

sub stripSpace($) {
    my ($s) = @_;
    $s =~ s|^\s*(.*[^\s])\s*|$1|s;
    return $s;
}

# ------------------------------------------------------------------------
# isWindows
#
#      Returns true if we're running on Windows.
# ------------------------------------------------------------------------

sub isWindows {
    return ($^O eq "MSWin32");
}

# ------------------------------------------------------------------------
# isLinux
#
#      Returns true if we're running on Linux.
# ------------------------------------------------------------------------

sub isLinux() {
    return ($^O eq "linux");
}

# ------------------------------------------------------------------------
# isLinuxUTF8()
#
#      Returns true if we're running on Linux.
# ------------------------------------------------------------------------

sub isLinuxUTF8() {
    return (isLinux() && $ENV{'LANG'} eq 'en_US.UTF-8');
}

# ------------------------------------------------------------------------
# isWindows2008
#
#      Returns true if we're running on Windows 2008 or Vista.
# ------------------------------------------------------------------------

sub isWindows2008() {
    if (isWindows()) {
        my @ver = Win32::GetOSVersion();
        my $majorVer = $ver[1];
        if ($majorVer == 6) {
            return 1;
        }
    }

    # Not win2k8.
    return 0;
}


# ------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------

sub main {
    mesg('DBG', "ntest started : %s\n", scalar(localtime()));

    # Parse command line arguments into global variables.

    GetOptions(%gOptions);
    if ($::gHelp) {
        print $::gHelpMessage;
        exit(0);
    }

    # Pick a directory in which to create test-specific subdirectories.

    if (!$::gTestOut) {
        # No directory specified on the commandline.  If there is an
        # OUTTOP environment variable, use it to compute a location.

        if ($ENV{OUTTOP}) {
            $::gTestOut = "$ENV{OUTTOP}/ntest";
        } else {
            # Default: assume we are in the test directory for one of the
            # system modules such as "web" or "agent"; pick a directory
            # parallel to our grandparent.

            $::gTestOut = "../../../ntest"
        }
    }
    if (!-d $::gTestOut) {
        File::Path::mkpath($::gTestOut) or die "ntest error:  couldn't "
                . "create test working directory \"$::gTestOut\": $!";
    }

    # Initialize a handle to the ElectricCommander.pm object.

    if ($::gFoundECModule) {
        ElectricCommander::setAbortDefault(0);
        $::gCommander = new ElectricCommander({
            server => $::gTarget,
            debug => $::gDebug,
            logFile => $::gDebugFile,
        });
    }

    # If no Web document root is specified, assume that we are in one
    # of a few standard development directories and check for a docroot
    # in one of a few relative directories.

    if (!$::gDocRoot) {
        my @docrootPath = ("../../../docroot", "docroot", ".");
        foreach my $dir (@docrootPath) {
            if (-e "$dir/login.php") {
                $::gDocRoot = $dir;
                last;
            }
        }
        if (!$::gDocRoot) {
            $::gDocRoot = "../docroot";
        }
    }
    $::gDocRoot = File::Spec->rel2abs($::gDocRoot);

    # Initialize various platform-specific configuration variables.

    if (isWindows()) {
        $::gToolsDir = "C:/cygwin/usr/local/tools";
        $::gTempDir = "$ENV{WINDIR}/Temp";
        $::gTempDir =~ s|\\|/|g;
    } else {
        $::gToolsDir = "/usr/local/tools";
        $::gTempDir = "/tmp";
    }
    mesg('DBG', "Temp directory: " . $::gTempDir . "\n");

    # Iterate over test files & directories.

    my @files;

    foreach my $arg (@ARGV) {
        if (-d $arg) {
            # This argument names a directory.  Process all of the
            # .ntest files in it.

            push(@files, glob("$arg/*.ntest"));
        } else {
            # This argument must name a single file.

            push(@files, $arg);
        }
    }
    if (!@files) {
        @files = glob("*.ntest");
    }

    foreach my $testFile (@files) {
        my $date;
        if ($::gQuiet) {
            $date = "";
        } else {
            $date = `date`;
            $date =~ s/\s+$//;
            $date .= ": ";
        }

        mesg('TEST', ($::gQuiet ? '' : "\n") . "$date$testFile:\n");

        $::gTestFileDir = getcwd();
        $::gTestFileDir .= "/" . dirname($testFile) unless dirname($testFile) eq ".";
        $::gTestFile    = $testFile;

        my @oldinc = @INC;
        push @INC, $::gTestFileDir;

        if (!(do $testFile)) {
            my $message = $@;
            if (!$message) {
                # If the test file isn't found no message is left in $@,
                # but there is a message in $!.

                $message = $!;
            }
            mesg('ERR', "ntest error: error processing %s: %s\n",
                 $testFile, $message);
        }
        @INC = @oldinc;
    }

    # Print timing information

    my $testDuration = 0;
    foreach my $duration (values(%::gTestTimes)) {
        $testDuration += $duration;
    }
    mesg('TEST', "\nTotal test duration: "
            . duration_exact($testDuration) . "\n");

    my $headerPrinted = 0;
    foreach my $key (sort {$::gTestTimes{$b} <=> $::gTestTimes{$a};}
            (keys(%::gTestTimes))) {
        my $duration = $::gTestTimes{$key};
        last if $duration <= 5;
        if (!$headerPrinted) {
            mesg('TEST', "\nTest durations >= 5 seconds:\n");
            $headerPrinted = 1;
        }
        mesg('TEST', "  $key " . (' ' x (50 - length($key)))
             . duration_exact($duration) . "\n");
    }

    # Print summary information.

    my $failedTests = "";
    if ($::gFailedTests > 0) {
        $failedTests = "\nFailed Tests:\n   @::gFailedTestCollector";
    }
    mesg('TEST', $failedTests . "\nTotal tests: $::gTotalTests   Passed: "
        . ($::gTotalTests - $::gSkippedTests - $::gFailedTests)
        . "   Failed: $::gFailedTests   Skipped: $::gSkippedTests\n");
    mesg('DBG', "\nntest finished: %s\n", scalar(localtime()));
}

main();


